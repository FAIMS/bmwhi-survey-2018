/************************* MEASUREMENT FIELDS WEBVIEW *************************/

final String REF_MEASUREMENT = "Measurement";

final String REF_LIST_OF_MEASUREMENTS = "Feature/Measurement/List_of_Measurements";

final String REF_ADD_MEASUREMENT = "Feature/Measurement/Add_Measurement";

final String REF_MEASUREMENT_DIMENSION =
  "Feature/Measurement/Dimension";
final String REF_MEASUREMENT_DIMENSION_ANNOTATION =
  "Feature/Measurement/Dimension_Annotation";
final String REF_MEASUREMENT_MEASUREMENT =
  "Feature/Measurement/Measurement";
final String REF_MEASUREMENT_MEASUREMENT_ANNOTATION =
  "Feature/Measurement/Measurement_Annotation";

final List REFS_MEASUREMENT_FIELDS = Arrays.asList(
  new String[]{
    REF_MEASUREMENT_DIMENSION,
    REF_MEASUREMENT_DIMENSION_ANNOTATION,
    REF_MEASUREMENT_MEASUREMENT,
    REF_MEASUREMENT_MEASUREMENT_ANNOTATION
  }
);

void clearFields(List refs) {
  for (ref : refs) {
    clearField(ref);
  }
}

void clearMeasurementFields() {
  clearFields(REFS_MEASUREMENT_FIELDS);
}

boolean isValidMeasurementFieldSet() {
  return
    !isNull(getFieldValue(REF_MEASUREMENT_DIMENSION)) &&
    !isNull(getFieldValue(REF_MEASUREMENT_MEASUREMENT));
}

void addMeasurement() {
  triggerAutoSave();
  String parentUuid = getUuid(REF_FEATURE);
  if (isNull(parentUuid)) {
    showToast("{Please_enter_data_first}");
    return;
  }

  if (!isValidMeasurementFieldSet()) {
    showToast("{Please_complete_the_Dimension_and_Measurement_fields}");
    return;
  }

  String dimensionAnnotation =
    getFieldValue(REF_MEASUREMENT_DIMENSION_ANNOTATION);
  String dimension =
    getFieldValue(REF_MEASUREMENT_DIMENSION);
  String measurementAnnotation =
    getFieldValue(REF_MEASUREMENT_MEASUREMENT_ANNOTATION);
  String measurement =
    getFieldValue(REF_MEASUREMENT_MEASUREMENT);
  clearMeasurementFields();

  String relTypeName = "";
  relTypeName += getArchEntType(REF_FEATURE);
  relTypeName += " - ";
  relTypeName += getArchEntType(REF_MEASUREMENT);

  String notifyUserAndUpdateList = "";
  notifyUserAndUpdateList +=
    "showToast(\"{toast_saved}\");";
  notifyUserAndUpdateList +=
    "populateEntityListsOfArchEnt(\"" + REF_MEASUREMENT + "\");";

  SaveCallback saveReln = new SaveCallback() {
    onSave(uuid, newRecord) {

      saveEntitiesToHierRel(
        relTypeName,
        parentUuid,
        uuid,
        "Parent Of",
        "Child Of",
        notifyUserAndUpdateList
      );
    }
  };

  EntityAttribute measurementDimensionAttr = createEntityAttribute(
    getAttributeName(REF_MEASUREMENT_DIMENSION),
    dimensionAnnotation,
    dimension,
    "",
    "1.0"
  );
  EntityAttribute measurementMeasurementAttr = createEntityAttribute(
    getAttributeName(REF_MEASUREMENT_MEASUREMENT),
    measurementAnnotation,
    "",
    measurement,
    "1.0"
  );

  List attribs = Arrays.asList(
    new EntityAttribute[]{
      measurementDimensionAttr,
      measurementMeasurementAttr
    }
  );

  saveArchEnt(
    null,
    getArchEntType(REF_MEASUREMENT),
    (List) null,
    attribs,
    saveReln
  );
}

addOnEvent(REF_ADD_MEASUREMENT, "click", "addMeasurement()");
