/********************************** TRACKLOG **********************************/
import java.util.concurrent.Callable;

final String REF_DIAG_REF = "Control/Tracklog/Diagnostics";
int NUM_TRACKLOG_POINTS = 0;

void startTrackLog() {
  setGpsInternalExternal();
  if (startGPS())
    startDistTrack();
}

void setGpsInternalExternal() {
  setFieldValue("Control/Tracklog/internalExternalGPS", "{Internal}");
}

saveEntitiesToRel(String type, String entity1, String entity2, Callable callback) {
  if (isNull(entity1) || isNull(entity2)) return;

  saveRel(null, type, null, null, new SaveCallback() {
    onSave(rel_id, newRecord) {
      addReln(entity1, rel_id, null);
      addReln(entity2, rel_id, null);
      callback.call();
    }
  });
}

List getTransectButtons() {
  List btns = new ArrayList();
  List refs = getRefsMatching("Control/Main/*");

  for (ref : refs)
    if ("button".equals(getType(ref)))
      btns.add(ref);

  return btns;
}

String getSurveyUnitId() {
  Log.d("getSurveyUnitId()", "" + getUuid());
  return getUuid();
}

boolean canMakeTransectPoint() {
  if (!isTrackingGPS()) {
    String head = "Cannot Continue";
    String body = "You must enable the tracklog to continue.";

    showWarning(head, body);
  }

  return isTrackingGPS();
}

startTimeTrack() {
    stopTrack();

    String trackText = getFieldValue("Control/Tracklog/tracktimeText");
    int    trackInt  = parseInt(trackText);

    if (trackInt <= 0) {
      showToast("Please enter a positive number in the 'Tracking Distance Interval' field");
    } else if(isInternalGPSOn() || isExternalGPSOn()) {
        showToast("Tracklog enabled. Tracklog time interval set to " + trackText + " seconds.");
        startTrackingGPS("time", trackInt, "saveGPSTrack(\"\")");
        updateGPSDiagnostics();
    } else {
        showToast("GPS is not turned on.");
    }
}

startDistTrack() {
    stopTrack();

    String trackText = getFieldValue("Control/Tracklog/trackdistText");
    int    trackInt  = parseInt(trackText);

    if(isInternalGPSOn() || isExternalGPSOn()) {
        showToast("Tracklog enabled. Tracklog distance interval set to " + trackText + " metres.");
        startTrackingGPS("distance", trackInt, "saveGPSTrack(\"\")");
        updateGPSDiagnostics();
    } else {
        showToast("GPS is not turned on.");
    }

}

stopTrack() {
    stopTrackingGPS();
    NUM_TRACKLOG_POINTS = 0;
    showToast("Tracklog disabled.");
    updateGPSDiagnostics();
    saveGPSTrack("End");
}

isGPSOn() {
  return isInternalGPSOn() || isExternalGPSOn();
}

saveGPSTrack(String stateAppend) {
    if (isInUnitTestTime()) {
      // This function uses the Nutiteq `Point` class, which is difficult to
      // mock.
      return;
    }

    position = getGPSPosition();
    if (!isGPSOn() || position == null) {
        return;
    }
    NUM_TRACKLOG_POINTS++;

    List attributes = createAttributeList();

    String date = new java.text.SimpleDateFormat("d-MMM-yy HH:MM:ss z").format(new Date());
    attributes.add(createEntityAttribute("Longitude"    , null , null , "" + position.getLongitude()   , null));
    attributes.add(createEntityAttribute("Latitude"     , null , null , "" + position.getLatitude()    , null));
    attributes.add(createEntityAttribute("Heading"      , null , null , "" + getGPSHeading()           , null));
    attributes.add(createEntityAttribute("Accuracy"     , null , null , "" + getGPSEstimatedAccuracy() , null));
    attributes.add(createEntityAttribute("Timestamp"    , null , null , "" + date                      , null));
    attributes.add(createEntityAttribute("TracklogTeam" , null , null , username                       , null));

    positionProj = getGPSPositionProjected();
    Point p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
    ArrayList l = new ArrayList();
    l.add(p);

    triggerAutoSave();
    saveArchEnt(null, "Tracklog", l, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            updateGPSDiagnostics();
        }
    });
}

boolean startGPS() {
    Object intext = getFieldValue("Control/Tracklog/internalExternalGPS");
    if(isNull(intext)) {
        showWarning("Warning", "Please choose whether you would like to connect to internal or external GPS.");
        return false;
    }
    setGPSUpdateInterval(Integer.parseInt(getFieldValue("Control/Tracklog/refreshText")));
    showToast("GPS enabled. GPS refresh rate set to " + getFieldValue("Control/Tracklog/refreshText") + ".");
    if(intext.equals("Internal")) { 
        if(isExternalGPSOn()) stopGPS();
        startInternalGPS();
    }
    if(intext.equals("External")) {
        if(isInternalGPSOn()) stopGPS();
        startExternalGPS();
    }
    updateGPSDiagnostics();
    return true;
}

stopGPSLogic() {
    if(isInternalGPSOn() || isExternalGPSOn()) {
        showToast("GPS disabled.");
        stopGPS();
        updateGPSDiagnostics();
    } else {
        showToast("GPS is not turned on.");
    }
}

reallyDeleteTransectUnit(String tabGroup) {
    fetchAll("select transect.uuid " +
            "from " +
            "(select uuid, relationshipid " +
            "from (select aenttypeid from aenttype where aenttypename = '" + getArchEntType(tabGroup) + "')  " +
                    "join latestnondeletedarchent using (aenttypeid) " +
                    "join latestnondeletedaentreln using (uuid)) surveyUnit  " +
            "join ((select aenttypeid from aenttype where aenttypename = 'Transect Point')  " +
                    "join latestnondeletedarchent using (aenttypeid) " +
                    "join latestnondeletedaentreln using (uuid)) transect using (relationshipid) " +
            "where surveyUnit.uuid = " + getUuid(tabGroup) + ";", new FetchCallback() {
                onFetch(transects) {
                    if(!isNull(transects)) {
                        for(transect:transects) {
                            deleteArchEnt(transect.get(0));
                        }
                    }
                }
            });
    deleteArchEnt(getUuid(tabGroup), null);
}

void initAndPersistOverSessions(String ref, String defaultVal) {
  setFieldValue(ref, defaultVal);
  persistOverSessions(ref, defaultVal);
}

removeActionBarItem("internal_gps");
removeActionBarItem("external_gps");
addActionBarItem("gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Internal_GPS}";
    }
    actionOn() {
        stopGPS();
        showToast("{Internal_GPS_Disabled}");
        updateGPSDiagnostics();
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Enable_Internal_GPS}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        setGpsInternalExternal();
        startGPS();
    }
});

String GPS_LAST_GOOD_STATUS = "";

void updateGPSDiagnostics() {
  if (REF_DIAG_REF.equals("")) {
    return;
  }

  String status               = "";
  String notInitialised       = "{GPS_is_not_initialised}";
  notInitialised = arch16nSubstituteValues(notInitialised);

  // Check if GPS is initialised or was previously initialised.
  if (!isExternalGPSOn() && !isInternalGPSOn()) {
    if (!isNull(GPS_LAST_GOOD_STATUS)) { // previous gps status is some last valid coordinate.
      String error = "{GPS_is_no_longer_initialised}. {Previous_status}:";
      error = arch16nSubstituteValues(error);

      status = error + "\n" + GPS_LAST_GOOD_STATUS;
    } else {
      status = notInitialised;
    }
  } else {
    status += "{Internal_GPS}: ";
    if (isInternalGPSOn())
    {
      status += "{on}";
    } else {
      status += "{off}";
    }
    status += "\nExternal GPS: ";
    if (isExternalGPSOn())
    {
      if (isBluetoothConnected()) {
        status += "{on_and_bluetooth_connected}";
      } else {
        status += "{on_and_bluetooth_disconnected}";
      }
    } else {
      status += "{off}";
    }
    Object position = getGPSPosition();
    if (position != null) {
      Object projPosition = getGPSPositionProjected();
      status += "\n{Latitude}: " + position.getLatitude();
      status += "   {Longitude}: " + position.getLongitude();
      status += "\n{Northing}: " + projPosition.getLatitude();
      status += "   {Easting}: " + projPosition.getLongitude();
      status += "\n{Accuracy}: " + getGPSEstimatedAccuracy();
    } else {
      status += "\n{Position}: {no_GPS_position_could_be_found}";
    }
    GPS_LAST_GOOD_STATUS = status;
  }

  // Tracklog stuff
  status += replaceFirst("\n{Tracklog}: {%s}", TRACKING_TYPE);

  String time = getFieldValue("Control/Tracklog/tracktimeText");
  String dist = getFieldValue("Control/Tracklog/trackdistText");

  switch (TRACKING_TYPE) {
    case "time":     status += ", " + time + "s"; break;
    case "distance": status += ", " + dist + "m"; break;
    default:
  }

  if (NUM_TRACKLOG_POINTS > 0)
    status += "\nNumber Tracklog Points collected: " +
                       NUM_TRACKLOG_POINTS;

  status += "\nCurrent GPS Estimated Accuracy: " +
                     getGPSEstimatedAccuracy();

  setFieldValue(REF_DIAG_REF, status);
}
addOnEvent("Control/Tracklog", "show", "setGpsInternalExternal()");
addOnEvent("Control/Tracklog/startGPSButton", "click", "startGPS();");
addOnEvent("Control/Tracklog/stopGPSButton", "click", "stopGPSLogic();");
addOnEvent("Control/Tracklog/trackOffButton", "click", "stopTrack()");
addOnEvent("Control/Tracklog/trackdistButton", "click", "startDistTrack()");
addOnEvent("Control/Tracklog/tracktimeButton", "click", "startTimeTrack()");

initAndPersistOverSessions("Control/Tracklog/refreshText",   "10");
initAndPersistOverSessions("Control/Tracklog/trackdistText", "20");
initAndPersistOverSessions("Control/Tracklog/tracktimeText", "30");

for (ref : getTransectTabGroups()) {
  addOnEvent(ref, "create", "saveGPSTrack(\"Start\")");
  addOnEvent(ref, "delete", "reallyDeleteTransectUnit", new Object[] {ref});
}

for (ref : getTransectButtons()) {
  addOnEventCond(ref, "click", "canMakeTransectPoint()");
}

addOnEvent("module", "starttrack", "updateGPSDiagnostics()");
addOnEvent("module", "stoptrack",  "updateGPSDiagnostics()");
addOnEvent(getTabRef(REF_DIAG_REF), "show",  "updateGPSDiagnostics()");
