/********************************** TRACKLOG **********************************/
import java.util.concurrent.Callable;

String tracklogStatus = "Tracklog is Stopped";
String tracklogState = "Stop";
Boolean transectEnabled = false;

numTracklogPoints = 0;
tracklogCurrentStatus = "";
numTransectPoints = 0;

void startTrackLog() {
  setGpsInternalExternal();
  if (startGPS())
    startDistTrack();
}

void setGpsInternalExternal() {
  setFieldValue("Control/Tracklog/internalExternalGPS", "{Internal}");
}

void  enableTransect() { transectEnabled = true;  }
void disableTransect() { transectEnabled = false; }

saveEntitiesToRel(String type, String entity1, String entity2, Callable callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
            callback.call();
        }
    });
}

List getTransectButtons() {
  List btns = new ArrayList();
  List refs = getRefsMatching("Control/Main/*");

  for (ref : refs)
    if ("button".equals(getType(ref)))
      btns.add(ref);

  return btns;
}

String getSurveyUnitId() {
  Log.d("getSurveyUnitId()", "" + getUuid());
  return getUuid();
}

boolean canMakeTransectPoint() {
  if (!isTrackingGPS()) {
    String head = "Cannot Continue";
    String body = "You must enable the tracklog to continue.";

    showWarning(head, body);
  }

  return isTrackingGPS();
}

startTimeTrack() {
    stopTrack();

    String trackText = getFieldValue("Control/Tracklog/tracktimeText");
    int    trackInt  = parseInt(trackText);

    if (trackInt <= 0) {
      showToast("Please enter a positive number in the 'Tracking Distance Interval' field");
    } else if(isInternalGPSOn() || isExternalGPSOn()) {
        tracklogState = "Time";
        showToast("Tracklog enabled. Tracklog time interval set to " + trackText + " seconds.");
        startTrackingGPS("time", trackInt, "saveGPSTrack(\"\")");
        updateTrackStatus();
    } else {
        showToast("GPS is not turned on.");
    }
}

startDistTrack() {
    stopTrack();

    String trackText = getFieldValue("Control/Tracklog/trackdistText");
    int    trackInt  = parseInt(trackText);

    if(isInternalGPSOn() || isExternalGPSOn()) {
        tracklogState = "Distance";
        showToast("Tracklog enabled. Tracklog distance interval set to " + trackText + " metres.");
        startTrackingGPS("distance", trackInt, "saveGPSTrack(\"\")");
        updateTrackStatus();
    } else {
        showToast("GPS is not turned on.");
    }

}

stopTrack() {
    stopTrackingGPS();
    numTracklogPoints = 0;
    numTransectPoints = 0;
    tracklogState = "Stopped";
    showToast("Tracklog disabled.");
    updateTrackStatus();
    saveGPSTrack("End");
}

updateTrackStatus() {
    if (tracklogState.equals("Time"))    
            tracklogStatus = "Tracklog Started - Time: "+getFieldValue("Control/Tracklog/tracktimeText")+"s";
    else if (tracklogState.equals("Distance"))
            tracklogStatus = "Tracklog Started - Distance: "+getFieldValue("Control/Tracklog/trackdistText")+"m";
    else
            tracklogStatus = "Tracklog is "+tracklogState;
    
    if (numTracklogPoints > 0)
        tracklogStatus += "\nNumber Tracklog Points collected: "+numTracklogPoints;
    if (numTransectPoints > 0)
        tracklogStatus += "\nNumber current transect Points collected: "+numTransectPoints;

    tracklogStatus += "\nCurrent GPS Estimated Accuracy: "+ getGPSEstimatedAccuracy();
    

    setFieldValue("Control/Tracklog/trackStatus", tracklogStatus);
}

isGPSOn() {
    return isInternalGPSOn() || isExternalGPSOn();
}

saveGPSTrack(String stateAppend) {
    if (isInUnitTestTime()) {
      // This function uses the Nutiteq `Point` class, which is difficult to
      // mock.
      return;
    }

    position = getGPSPosition();
    if (!isGPSOn() || position == null) {
        tracklogState = "Bad GPS Fix";
        return;
    }
    numTracklogPoints++;

    List attributes = createAttributeList();

    String date = new java.text.SimpleDateFormat("d-MMM-yy HH:MM:ss z").format(new Date());
    attributes.add(createEntityAttribute("Longitude"    , null , null , "" + position.getLongitude()   , null));
    attributes.add(createEntityAttribute("Latitude"     , null , null , "" + position.getLatitude()    , null));
    attributes.add(createEntityAttribute("Heading"      , null , null , "" + getGPSHeading()           , null));
    attributes.add(createEntityAttribute("Accuracy"     , null , null , "" + getGPSEstimatedAccuracy() , null));
    attributes.add(createEntityAttribute("Timestamp"    , null , null , "" + date                      , null));
    attributes.add(createEntityAttribute("TracklogTeam" , null , null , username                       , null));

    positionProj = getGPSPositionProjected();
    Point p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
    ArrayList l = new ArrayList();
    l.add(p);

    triggerAutoSave();
    saveArchEnt(null, "Tracklog", l, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            if (transectEnabled) {
                numTransectPoints++;
                Boolean end = false;
                if(stateAppend.equals("End")) {
                    end = true;
                    transectEnabled = false;
                }
                if (!stateAppend.equals("")) {
                    attributes.add(createEntityAttribute("State", null, null, stateAppend, null));
                    stateAppend = "";
                }

                p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
                l = new ArrayList();
                l.add(p);
                
                saveArchEnt(null, "Transect Point", l, attributes, new SaveCallback() {
                    onSave(uuid, newRecord) {
                        transect_id = uuid;
                        Callable callback = new Callable() {
                            call() {
                                return;
                                //if(end) updateCurrentTransect();
                            }
                        };
                        saveEntitiesToRel("TransectSUI", transect_id, getSurveyUnitId(), callback);
                    }
                });
            }
            updateTrackStatus();
        }
    });
}

boolean startGPS() {
    Object intext = getFieldValue("Control/Tracklog/internalExternalGPS");
    if(isNull(intext)) {
        showWarning("Warning", "Please choose whether you would like to connect to internal or external GPS.");
        return false;
    }
    setGPSUpdateInterval(Integer.parseInt(getFieldValue("Control/Tracklog/refreshText")));
    showToast("GPS enabled. GPS refresh rate set to " + getFieldValue("Control/Tracklog/refreshText") + ".");
    if(intext.equals("Internal")) { 
        if(isExternalGPSOn()) stopGPS();
        startInternalGPS();
    }
    if(intext.equals("External")) {
        if(isInternalGPSOn()) stopGPS();
        startExternalGPS();
    }
    updateGPSDiagnostics();
    return true;
}

stopGPSLogic() {
    if(isInternalGPSOn() || isExternalGPSOn()) {
        showToast("GPS disabled.");
        stopGPS();
    } else {
        showToast("GPS is not turned on.");
    }
}

reallyDeleteTransectUnit(String tabGroup) {
    fetchAll("select transect.uuid " +
            "from " +
            "(select uuid, relationshipid " +
            "from (select aenttypeid from aenttype where aenttypename = '" + getArchEntType(tabGroup) + "')  " +
                    "join latestnondeletedarchent using (aenttypeid) " +
                    "join latestnondeletedaentreln using (uuid)) surveyUnit  " +
            "join ((select aenttypeid from aenttype where aenttypename = 'Transect Point')  " +
                    "join latestnondeletedarchent using (aenttypeid) " +
                    "join latestnondeletedaentreln using (uuid)) transect using (relationshipid) " +
            "where surveyUnit.uuid = " + getUuid(tabGroup) + ";", new FetchCallback() {
                onFetch(transects) {
                    if(!isNull(transects)) {
                        for(transect:transects) {
                            deleteArchEnt(transect.get(0));
                        }
                    }
                }
            });
    deleteArchEnt(getUuid(tabGroup), new DeleteCallback() {
        onDelete(uuid) {
            transectEnabled = false;
        }
    });
}

void initAndPersistOverSessions(String ref, String defaultVal) {
  setFieldValue(ref, defaultVal);
  persistOverSessions(ref, defaultVal);
}

removeActionBarItem("internal_gps");
removeActionBarItem("external_gps");
addActionBarItem("gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Internal_GPS}";
    }
    actionOn() {
        stopGPS();
        showToast("{Internal_GPS_Disabled}");
        updateGPSDiagnostics();
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Enable_Internal_GPS}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        setGpsInternalExternal();
        startGPS();
    }
});

addOnEvent("Control/Tracklog", "show", "setGpsInternalExternal()");
addOnEvent("Control/Tracklog/startGPSButton", "click", "startGPS();");
addOnEvent("Control/Tracklog/stopGPSButton", "click", "stopGPSLogic();");
addOnEvent("Control/Tracklog/trackOffButton", "click", "stopTrack()");
addOnEvent("Control/Tracklog/trackdistButton", "click", "startDistTrack()");
addOnEvent("Control/Tracklog/tracktimeButton", "click", "startTimeTrack()");

initAndPersistOverSessions("Control/Tracklog/refreshText",   "10");
initAndPersistOverSessions("Control/Tracklog/trackdistText", "20");
initAndPersistOverSessions("Control/Tracklog/tracktimeText", "30");

addOnEvent("Control/Tracklog/trackOffButton", "click", "disableTransect()");
for (ref : getTransectTabGroups()) {
  addOnEvent(ref, "create", "enableTransect()", PRECEDENCE_MID+1);
  addOnEvent(ref, "create", "saveGPSTrack(\"Start\")");
  addOnEvent(ref, "delete", "disableTransect()");
  addOnEvent(ref, "delete", "reallyDeleteTransectUnit", new Object[] {ref});
}

for (ref : getTransectButtons()) {
  addOnEventCond(ref, "click", "canMakeTransectPoint()");
}
