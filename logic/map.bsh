/************************************ MAP *************************************/
DATA_ENTRY_LAYER = "Data Entry Layer";
DATA_ENTRY_LAYER_ID = 0;

int  MAP_COLORS_IDX  = 0;
List MAP_COLORS = new ArrayList();
//MAP_COLORS.add(Color.BLACK);
MAP_COLORS.add(Color.RED);
MAP_COLORS.add(Color.BLUE);
MAP_COLORS.add(Color.CYAN);
MAP_COLORS.add(Color.DKGRAY);
MAP_COLORS.add(Color.GRAY);
MAP_COLORS.add(Color.GREEN);
MAP_COLORS.add(Color.LTGRAY);
MAP_COLORS.add(Color.MAGENTA);
MAP_COLORS.add(Color.WHITE);
MAP_COLORS.add(Color.YELLOW);

int DATABASE = 0;
int SPATIAL  = 1;

void loadHighlightedRecord() {
  List highlights = getGeometryHighlights(MAP_REF);
  boolean canLoadHighlightedRecord =
    highlights != void &&
    highlights != null &&
    highlights.size() == 1;

  if (!canLoadHighlightedRecord) {
    String head = "Cannot Load Record";
    String body = "You must highlight exactly one record to load.";

    showWarning(head, body);
    return;
  }

  List highlights = getGeometryHighlights(MAP_REF);
  Geometry geo = highlights.get(0);
  Point pt = (Point) geo;
  MapPos pos = pt.getMapPos();

  double longitude = pos.x;
  double latitude  = pos.y;

  String q = "";
  q += " SELECT uuid,";
  q += "        coalesce(";
  q += "            Distance(";
  q += "                 geospatialcolumn,";
  q += "                 MakePoint({longitude}, {latitude}),";
  q += "                 0";
  q += "            ),";
  q += "            0";
  q += "        ) AS dist";
  q += "     FROM latestnondeletedarchent";
  q += "     JOIN aenttype USING (aenttypeid)";
  q += "    WHERE geospatialcolumn NOT NULL";
  q += "      AND dist < 1e-2 /* One centimetre */";
  q += "      AND aenttypename = 'Feature'";
  q += " ORDER BY dist";
  q += "    LIMIT 1;";
  q = replaceFirst(q, "{longitude}", "" + longitude);
  q = replaceFirst(q, "{latitude}",  "" + latitude);

  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      String head  = "{err_load_entity_head}";
      String body  =
        "The point you selected does not correspond to a viewable record.";

      if (result        == null) { showWarning(head, body); return; }
      if (result.size() == 0   ) { showWarning(head, body); return; }

      loadEntityFrom(result.get(0).get(0));
    }
    onError(message) {
      Log.e(message);
    }
  };

  fetchAll(q, callback);
}

void showMapLayer(String archEntType, int layerType, int color, float ptSize) {
  showMapLayer(archEntType, layerType, "identifier", color, ptSize);
}

void showMapLayer(
    String archEntType,
    int layerType,
    String column,
    int color,
    float ptSize
) {
  //int colorIdx = MAP_COLORS_IDX++ % MAP_COLORS.size();
  //int color = MAP_COLORS.get(colorIdx);

  boolean isEntity = true;
  String querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = '" + archEntType + "'";
  ps = createPointStyle(10, color, ptSize, 0.5f);
  ls = createLineStyle(10, color, 0.05f, 0.3f, null);
  pos = createPolygonStyle(10, color, createLineStyle(10, color, 0.01f, 0.3f, null));
  ts = createTextStyle(10, color, 30, Typeface.SANS_SERIF);

  if (layerType == DATABASE)
    showDatabaseLayer(
        MAP_REF,
        archEntType + " Layer",
        isEntity,
        archEntType,
        querySQL,
        ps,
        ls,
        pos,
        ts
    );

  if (layerType == SPATIAL)
    showSpatialLayer(
        MAP_REF,
        archEntType + " (April)",
        "files/data/shapes/shapes.sqlite",
        archEntType.replaceAll(" ", ""),
        "PK_UID",
        column,
        ps,
        ls,
        pos,
        ts
    );

}

void initMap() {
  setMapZoom(MAP_REF, 15.0f);

  showBaseMap  (MAP_REF, "Base Layer 1", "files/data/maps/BM1.tif");
  showRasterMap(MAP_REF, "Base Layer 2", "files/data/maps/BM2.tif");

  // Tracklog
  showMapLayer("Feature",  DATABASE,               Color.BLUE,  0.2f);
  showMapLayer("Tracklog", DATABASE,               Color.BLACK, 0.1f);

  showMapLayer("Feature",  SPATIAL,  "FeatureID",  Color.BLUE,  0.2f);
  showMapLayer("Tracklog", SPATIAL,  "TracklogT0", Color.BLACK, 0.1f);

  DATA_ENTRY_LAYER_ID = createCanvasLayer(MAP_REF, DATA_ENTRY_LAYER);
}

initMap();

addOnEvent(
    "Control/Map/Load_Highlighted_Record",
    "click",
    "loadHighlightedRecord()"
);
