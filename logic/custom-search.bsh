/******************************* CUSTOM SEARCH ********************************/
final String REF_SEARCH_TAB = "Control/Search";
final String REF_FEATURE_FEATURE_TYPE = "Feature/Feature/Feature_Type";
final String _REF_SEARCH_FEATURE_TYPE = REF_SEARCH_TAB + "/" +
    getGuiElementRef(REF_FEATURE_FEATURE_TYPE);

Comparator MenuEntryComparator() {
  int compare(List a, List b) {
    String vocabNameA = a.get(1);
    String vocabNameB = b.get(1);

    vocabNameA = arch16nSubstituteValues(vocabNameA);
    vocabNameB = arch16nSubstituteValues(vocabNameB);

    // Put "All" first
    if ("All".equals(vocabNameA)) return -1;
    if ("All".equals(vocabNameB)) return +1;

    // Put "Other" last
    if ("Other".equals(vocabNameA)) return +1;
    if ("Other".equals(vocabNameB)) return -1;

    // Order the rest lexicographically
    return vocabNameA.compareTo(vocabNameB);
  }
  boolean equals(a, b) { return compare(a, b) == 0; }
  return this;
}

void populateSelectUser(){
  String refSearchUsers = REF_SEARCH_TAB + "/Select_User";
  String getNonDeletedUsersQuery = "SELECT userid, fname || ' ' || lname "+
                                   "  FROM user "+
                                   " WHERE userdeleted is null "+
                                   " UNION " +
                                   "SELECT -1, '{All}'";
                                   "ORDER BY userid";

  fetchAll(getNonDeletedUsersQuery, new FetchCallback() {
    onFetch(result) {
      populateDropDown(refSearchUsers, result, false);
    }
  });
}

void populateSearchFeatureType() {
  List menuEntries = getMenuEntriesFromRef(REF_FEATURE_FEATURE_TYPE);
  Log.d("", "" + menuEntries);

  // Get top-level menuEntries
  List topMenuEntries = new ArrayList();
  for (List menuEntry : menuEntries) {
    String parentVocabId = menuEntry.get(3);

    if (isNull(parentVocabId))
      topMenuEntries.add(menuEntry);
  }

  // Map a top-level VocabID to its sub-VocabIDs
  Map topVocabIdToSubVocabIds = new HashMap();
  for (List menuEntry : topMenuEntries) {
    String parentVocabId = menuEntry.get(0);
    topVocabIdToSubVocabIds.put(parentVocabId, new ArrayList());
  }

  for (List menuEntry : menuEntries) {
    String vocabId       = menuEntry.get(0);
    String parentVocabId = menuEntry.get(3);

    if (isNull(parentVocabId))
      continue;

    topVocabIdToSubVocabIds.get(parentVocabId).add(vocabId);
  }

  // Transform the `topVocabIdToSubVocabIds` map to be in a format that
  // `populateDropDown` can take. The parentVocabId and sub-vocabIds will be put
  // altogether into a list and converted to an SQL snippet
  menuEntries = new ArrayList();
  List groupedVocabIds = new ArrayList();
  for (String parentVocabId : topVocabIdToSubVocabIds.keySet()) {
    List vocabIdGroup = topVocabIdToSubVocabIds.get(parentVocabId);
    vocabIdGroup.add(parentVocabId);

    String sql = listToSqlString(vocabIdGroup);

    List menuEntry = new ArrayList();
    menuEntry.add(sql);
    menuEntry.add(VOCABID_TO_VOCABNAME.get(parentVocabId));

    menuEntries.add(menuEntry);
  }

  // Add 'All' option to start of list
  List menuEntry = new ArrayList();
  menuEntry.add("(-1)");
  menuEntry.add("{All}"); // VocabName

  menuEntries.add(menuEntry);

  // Order the menu entries
  Collections.sort(menuEntries, MenuEntryComparator());

  // Populate dropdown
  boolean hasNull = false;
  populateDropDown(
      REF_SEARCH_TAB + "/" + getGuiElementRef(REF_FEATURE_FEATURE_TYPE),
      menuEntries,
      hasNull
  );
}

void clearSearchResults() {
  populateCursorList(
      REF_SEARCH_TAB + "/Entity_List",
      "SELECT 0 WHERE 0 = 1 LIMIT ? OFFSET ?",
      25
  );
}

void search(){
  String refEntityList  = REF_SEARCH_TAB + "/Entity_List";
  String refSearchTerm  = REF_SEARCH_TAB + "/Search_Term";
  String refEntityTypes = REF_SEARCH_TAB + "/Entity_Types";
  String refSelectUser  = REF_SEARCH_TAB + "/Select_User";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String user = getFieldValue(refSelectUser);
  String feat = getFieldValue(_REF_SEARCH_FEATURE_TYPE);
  String searchQuery = "SELECT uuid, response "+
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers " +
                       " WHERE uuid IN (SELECT uuid "+
                       "                  FROM latestNonDeletedArchEntIdentifiers " +
                       "                 WHERE measure LIKE {term}||'%' "+
                       "                   AND {type} IN ('', aenttypename )" +
                       "                   AND {user} IN (-1, userid)" +
                       "                )  "+
                       "   AND uuid IN (SELECT uuid "+
                       "                  FROM latestNonDeletedArchEntIdentifiers " +
                       "                 WHERE vocabid IN {feature_type}" +
                       "                    OR      -1 IN {feature_type}" +
                       "                )  "+
                       " ORDER BY substr(uuid, 7, 13) desc, response " +
                       " LIMIT ? "+
                       "OFFSET ? ";
  searchQuery = dbReplaceFirst(searchQuery, "{term}", term);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);
  searchQuery =   replaceFirst(searchQuery, "{user}", user);
  searchQuery =   replaceFirst(searchQuery, "{feature_type}", feat);
  searchQuery =   replaceFirst(searchQuery, "{feature_type}", feat);

  populateCursorList(refEntityList, searchQuery, 25);

  Log.d("Module", "Search query: " + searchQuery);
}

addOnEvent(REF_SEARCH_TAB, "show", "populateSelectUser()");
addOnEvent("module", "load", "populateSearchFeatureType()");
addOnEvent("module", "load", "clearSearchResults()");
delOnEvent(REF_SEARCH_TAB, "show", "search()");
delOnEvent(REF_SEARCH_TAB + "/Entity_Types"  , "click" , "search()");
